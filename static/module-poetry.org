#+title: Module Poetry
#+subtitle: https://github.com/AlbertoV5/python-blog
#+author: Alberto Valdez
#+SETUPFILE: ../config/org-theme-alt.config
#+SETUPFILE: ../config/org-header.config

* Creating Python Modules with Poetry (macOS)
:PROPERTIES:
:CUSTOM_ID: creating-python-modules-with-poetry-macos
:END:

The first steps and the development cycle.

#+attr_html: :width 700px
[[../resources/pexels-suzy-hazelwood-1122865.jpg]]

Photo by Suzy Hazelwood: https://www.pexels.com/photo/closeup-photo-of-assorted-title-books-1122865/

We are going to go over the basic steps for creating a Python module with Poetry focusing on macOS just to keep it simple. Requirements:

1. macOS >= 10.15.7
2. pyenv >= 2.3.6
3. poetry >= 1.2.2

#+begin_src shell
sw_vers | grep ProductVersion
#+end_src

#+RESULTS[c5deee08aa4606b8ff38398832fe45604ddf14b9]:
#+begin_example
ProductVersion:	10.15.7
#+end_example

#+begin_src shell
pyenv --version
#+end_src

#+RESULTS[0abb17c55aea211c0a146772e3a731021e240ee1]:
#+begin_example
pyenv 2.3.6
#+end_example

#+begin_src shell
poetry --version
#+end_src

#+RESULTS[3c1f04c317699d0d707bbd152918f401d2461bb4]:
#+begin_example
Poetry (version 1.2.2)
#+end_example

** Module Context
:PROPERTIES:
:CUSTOM_ID: module-context
:END:

Before starting the process, we are going to define the type of module we are creating. In this case, we are creating a simple "local" scraper that will open HTML files in a directory with JavaScript enabled, so we will use the classic Selenium and BeautifulSoup4 combination.

We want to use this utility in many different directories so instead of copying and pasting it or using a git submodule, we are going to make it a python module that we can use in our global pyenv environment.

** Creating Directories
:PROPERTIES:
:CUSTOM_ID: creating-directories
:END:

We are going to create a directory and the necessary files for development.

#+begin_src shell :eval no
mkdir html-index-maker && cd html-index-maker
#+end_src

We create a source directory.

#+begin_src shell :eval no
mkdir src && mkdir src/html-index-maker
#+end_src

And our init and main files.

#+begin_src shell :eval no
touch src/html-index-maker/__init__.py && touch src/html-index-maker/__main__.py
#+end_src

Then create a readme file (do it or Poetry won't be happy).

#+begin_src shell :eval no
touch ./README.md
#+end_src

** Initializing Git and Poetry
:PROPERTIES:
:CUSTOM_ID: initializing-git-and-poetry
:END:

We initialize git and change to "main".

#+begin_src shell :eval no
git init && git checkout -b main
#+end_src

Then we can start poetry.

#+begin_src shell :eval no
poetry init
#+end_src

#+begin_example shell
This command will guide you through creating your pyproject.toml config.

Package name [html-index-maker]:
Version [0.1.0]:
Description []:
Author [AlbertoV5 <58243333+AlbertoV5@users.noreply.github.com>, n to skip]:
License []:  MIT
Compatible Python versions [^3.10]:  ^3.7

Would you like to define your main dependencies interactively? (yes/no) [yes] no
Would you like to define your development dependencies interactively? (yes/no) [yes] no
#+end_example

Then we will get a resulting generated file.

#+begin_example toml :eval no
[tool.poetry]
name = "html-index-maker"
version = "0.1.0"
description = ""
authors = ["AlbertoV5 <58243333+AlbertoV5@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "html_index_maker", from = "src"}]

[tool.poetry.dependencies]
python = "^3.7"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
#+end_example

However, note that the =packages= must match the folder under "src"!

So make sure to change it in the TOML file if needed.

#+begin_src toml :eval no
packages = [{include = "html-index-maker"}]
#+end_src

** Creating the Environment
:PROPERTIES:
:CUSTOM_ID: creating-the-environment
:END:

Now we can start a "venv". Note that Poetry tracks the absolute path of the venv directory, so try not changing the parent folder's name.

#+begin_src shell :eval no
python -m venv ./venv
#+end_src

Make sure to activate the venv!

#+begin_src shell :eval no
source ./venv/bin/activate
#+end_src

Now confirm that Poetry knows about the venv!

#+begin_src shell :eval no
poetry env info
#+end_src

#+begin_example shell
Virtualenv
Python:         3.7.13
Implementation: CPython
Path:           /Users/albertovaldez/html-index-maker/venv
Executable:     /Users/albertovaldez/html-index-maker/venv/bin/python
Valid:          True

System
Platform:   darwin
OS:         posix
Python:     3.7.13
Path:       /Users/albertovaldez/.pyenv/versions/3.7.13
Executable: /Users/albertovaldez/.pyenv/versions/3.7.13/bin/python3.7
#+end_example

We are ready to go!

** Adding dependencies
:PROPERTIES:
:CUSTOM_ID: adding-dependencies
:END:

We will add the dependencies via Poetry.

#+begin_src shell :eval no
poetry add BeautifulSoup4
#+end_src

#+begin_src shell :eval no
poetry add selenium
#+end_src

#+begin_src shell :eval no
poetry add webdriver-manager
#+end_src

Then we will add the dev dependencies.

#+begin_src shell :eval no
poetry add --group dev black
#+end_src

#+begin_src shell :eval no
poetry add --group dev pytest
#+end_src

Now our dependencies in the TOML file should look like this.

#+begin_src toml
[tool.poetry.dependencies]
python = "^3.7"
beautifulsoup4 = "^4.11.1"
selenium = "^4.6.0"
webdriver-manager = "^3.8.5"


[tool.poetry.group.dev.dependencies]
black = "^22.10.0"
pytest = "^7.2.0"
#+end_src

** Developing the Module
:PROPERTIES:
:CUSTOM_ID: developing-the-module
:END:

We can start by adding all our code to the __main__.py file and then, if needed, we'll create additional files to import into main.

Let's make sure we define a short loop before writing more code. So we are going to add a simple procedure to the main function and run the code via Poetry to make sure it works.

#+NAME: main1
#+begin_src python :eval no
from argparse import ArgumentParser, Namespace

def main(argv: Namespace):
    print("Hello", argv.name)

if __name__ == "__main__":
    args = ArgumentParser()
    args.add_argument("-n", "--name")
    main(args.parse_args())
#+end_src

This should print "Hello " and whatever name we give it as argument.

Before running the code, we can install the module in the environment, then run it via Poetry.

#+NAME: main2
#+begin_src shell :eval no
poetry install
#+end_src

Then run the code with "Bob" as argument. Note that the code should work without "poetry run" if we are working in the "venv" environment but we are keeping it as a general practice.

#+begin_src shell :eval no
poetry run python -m html-index-maker Bob
#+end_src

#+begin_example shell
Hello Bob
#+end_example

** Creating Tests
:PROPERTIES:
:CUSTOM_ID: creating-tests
:END:

We will create a test so we can verify that the code works after refactoring and adding functionality. So we will create a new directory and a new file for this.

#+begin_src shell :eval no
mkdir ./tests && touch ./tests/test_main.py
#+end_src

If we use "tree", we can verify the state of our directory.

#+begin_src shell :eval no
tree -I 'venv|__pycache__'
#+end_src

#+begin_example
.
├── README.md
├── poetry.lock
├── pyproject.toml
├── src
│   └── html-index-maker
│       ├── __init__.py
│       └── __main__.py
└── tests
    └── test_main.py
#+end_example

Now we can create our code for testing.

#+begin_src python :eval no
import subprocess
import logging

log = logging.getLogger(__name__)

def test_main():
    command = ["poetry", "run", "python", "-m", "html-index-maker", "Bob"]
    out = subprocess.check_output(command)
    assert out.decode("utf-8") == "Hello Bob\n"
    log.debug(out)
#+end_src

And run it simply via pytest.

#+begin_src shell :eval no
poetry run pytest
#+end_src

#+begin_example :shell
======================== test session starts =========================
platform darwin -- Python 3.7.13, pytest-7.2.0, pluggy-1.0.0
rootdir: /Users/albertovaldez/html-index-maker
collected 1 item

tests/test_main.py .                                           [100%]

========================= 1 passed in 0.62s ==========================
#+end_example

Note that we didn't get any log information, but we can always tell pytest to register debug messages by adding it to the "pyproject" file.

#+begin_src toml
[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)s] (%(filename)s:%(lineno)s): %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests/tests.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)s] (%(filename)s:%(lineno)s): %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
#+end_src

Now we can try again!

#+begin_src shell :eval no
poetry run pytest
#+end_src

#+begin_example :shell
======================== test session starts =========================
platform darwin -- Python 3.7.13, pytest-7.2.0, pluggy-1.0.0
rootdir: /Users/albertovaldez/html-index-maker, configfile: pyproject.toml
collected 1 item

tests/test_main.py::test_main
--------------------------- live log call ----------------------------
2022-11-20 02:32:33 [DEBUG] (test_main.py:11): b'Hello Bob\n'
PASSED                                                         [100%]

========================= 1 passed in 1.21s ==========================
#+end_example

We get the string output in the pytest log so we can move on now!

Note: Don't forget to commit your changes!

** The Development Cycle
:PROPERTIES:
:CUSTOM_ID: the-development-cycle
:END:

Now that everything is ready to go, we will move by following the same steps:

1. Write / Change code
2. Run tests

So if we change the functionality of our code, we will know if it is working as intended or not, but for that we need to change the test first to match our initial requirements.

And even before that we will add the "Black" code formatter into the mix, we could add it to pre-commit instead but in this case we will run Black manually and leave pre-commit for another time. So the dev cycle will look like:

1. Write code
2. Test it
3. Format it

The last two steps can be reduced to:

#+begin_src shell :eval no
poetry run black . && poetry run pytest
#+end_src

So we can copy and paste that line into the command line and then repeat it after we make significant changes to our code. Black will run first and then pytest to make sure we get the pytest log after whatever Black outputs to the console.

** Development
:PROPERTIES:
:CUSTOM_ID: development
:END:

WIP ...


** Installing Globally
:PROPERTIES:
:CUSTOM_ID: installing-globally
:END:

We can install the module in editable mode in our global pyenv environment with the following command.

#+begin_src shell :eval no
pip install -e .
#+end_src

This means that we don't need to use the poetry command before calling it, and every change we make to it will be reflected into the global version. However, dependencies may conflict with other modules and testeability may not be ideal so we will still want to run it via poetry when developing.

However, this can allow us to run the module in any directory without the need to publish it to PyPi, and we can upload it to a public repository and anyone else can clone it and install it. Just remember than you may need to use either "poetry build" or "poetry install" to build the .whl file before using pip to install it globally in editable mode.

** Publishing to PyPi
:PROPERTIES:
:CUSTOM_ID: publishing-to-pypi
:END:

WIP ...
